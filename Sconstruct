import os
import shutil

def copy_dll(target, source, env):
    # Path to the GLEW DLL
    glew_dll_path = os.path.join('include', 'glew', 'bin', 'glew32.dll')
    # Path to Assimp DLL
    assimp_dll_path = os.path.join('include', 'assimp', 'Assimp', 'bin','x64', 'assimp-vc143-mt.dll')
    #Path to D3DCompiler DLL
    d3dcompiler_dll_path = os.path.join('include', 'assimp', 'Assimp', 'bin','x64', 'D3DCompiler_42.dll')
    #Path to D3Dx9 DLL
    d3dx9_dll_path = os.path.join('include', 'assimp', 'Assimp', 'bin','x64', 'D3DX9_42.dll')
    # Path to the build directory
    target_dir = os.path.dirname(str(target[0]))

    # Copy the DLL to the build directory
    shutil.copy(glew_dll_path, target_dir)
    shutil.copy(assimp_dll_path, target_dir)
    shutil.copy(d3dcompiler_dll_path, target_dir)
    shutil.copy(d3dx9_dll_path, target_dir)

# Environment setup
env = Environment(CXXFLAGS='/std:c++17')


# Set the runtime library flags for MSVC
if env['PLATFORM'] == 'win32':
    env.Append(CXXFLAGS=['/EHsc'])  # Use /EHsc for exception handling in MSVC

    # Ensure consistent runtime library linking
    env.Append(CXXFLAGS=['/MD'])  # Or /MT, depending on how GLFW was built

# Include paths for GLFW, GLEW, GLM, ImGui, and ImGuizmo
env.Append(CPPPATH=[
    'include/glfw/include',        # Path to GLFW include directory
    'include/glew/include',        # Path to GLEW include directory
    'include/glm',                 # Path to GLM include directory
    'include/imgui',               # Path to ImGui include directory
    'include/imgui/backends',      # Path to ImGui backends directory
    'include/imguizmo',            # Path to ImGuizmo include directory
    'include/nfd/src/include',     # Path to Native File Dialog include directory
    'include/nanosvg/src',         # Path to NanoSVG include directory
    'include/entt',                # Path to EnTT include directory
    'include/nlohmann',            # Path to nlohmann json include directory
    'include/assimp/Assimp/include', # Path to Assimp include directory
    'include/stb',                 # Path to stb include directory
])

# Library paths for GLFW, GLEW, and OpenGL
env.Append(LIBPATH=[
    'include/glfw/lib',        # Path to GLFW library directory
    'include/glew/lib',         # Path to GLEW library directory
    'include/nanosvg/lib',      # Path to NanoSVG library directory
    'include/assimp/Assimp/lib/x64', # Path to Assimp library directory
])

# Link the necessary libraries
env.Append(LIBS=[
    'glfw3',      # GLFW library
    'glew32',     # GLEW library
    'opengl32',   # OpenGL library on Windows
    'glu32',      # OpenGL Utility Library (optional)
    'user32',     # Windows User API
    'gdi32',      # Windows GDI
    'shell32',    # Windows Shell API
    'kernel32',   # Windows Kernel API
    'ucrt',       # Universal C Runtime Library (if needed)
    'ole32',       # Link against ole32.lib for COM functions
    'nanosvg',     # NanoSVG library
    'nanosvgrast', # NanoSVG rasterizer library
    'assimp-vc143-mt', # Assimp library
])

# Specify source files
imgui_sources = [
    'include/imgui/imgui.cpp',
    'include/imgui/imgui_draw.cpp',
    'include/imgui/imgui_widgets.cpp',
    'include/imgui/imgui_tables.cpp',
    'include/imgui/imgui_demo.cpp',
    'include/imgui/backends/imgui_impl_glfw.cpp',
    'include/imgui/backends/imgui_impl_opengl3.cpp',
    'include/nfd/src/nfd_win.cpp'
]

imguizmo_sources = [
    'include/imguizmo/ImGuizmo.cpp',
    'include/imguizmo/GraphEditor.cpp',
    'include/imguizmo/ImCurveEdit.cpp',
    'include/imguizmo/ImGradient.cpp',
    'include/imguizmo/ImSequencer.cpp'
]

# Specify source files
sources = Glob('src/*.cpp') + Glob('src/**/*.cpp') + imgui_sources + imguizmo_sources

# Create the build target
program = env.Program(target='build/EduGameEngine', source=sources)
env.AddPostAction(program, copy_dll)
